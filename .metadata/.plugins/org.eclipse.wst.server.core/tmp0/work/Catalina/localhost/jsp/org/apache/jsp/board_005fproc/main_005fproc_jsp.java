/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-09-15 06:29:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005fproc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.awt.PageAttributes.OrientationRequestedType;
import java.sql.*;
import lib.DB;

public final class main_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.awt.PageAttributes.OrientationRequestedType");
    _jspx_imports_classes.add("lib.DB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

Connection conn = null;

String sql = "";
Statement st = null;
ResultSet rs = null;
List <Map<String, String>>memberboardlist = new ArrayList<>();

String sql2 = "";
Statement st2 = null;
ResultSet rs2 = null;
List <Map<String, String>>Noticelist = new ArrayList<>();

String sql3 = "";
Statement st3 = null;
ResultSet rs3 = null;
List <Map<String, String>>anonymitylist = new ArrayList<>();

String sql4 = "";
Statement st4 = null;
ResultSet rs4 = null;
List <Map<String, String>>gallerylist = new ArrayList<>();

try {
	conn = DB.getConnection();
	
	sql = "SELECT * FROM board WHERE boardtype=1 ORDER BY idx DESC LIMIT 5";
	sql2 = "SELECT * FROM board WHERE boardtype=0 ORDER BY idx DESC LIMIT 5";
	sql3 = "SELECT * FROM board WHERE boardtype=2 ORDER BY idx DESC LIMIT 5";
	sql4 = "SELECT * FROM board WHERE upfile IS not NULL ORDER BY idx DESC LIMIT 3";
	
	st = conn.createStatement();
	st2 = conn.createStatement();
	st3 = conn.createStatement();
	st4 = conn.createStatement();
	rs = st.executeQuery(sql);
	rs2 = st2.executeQuery(sql2);
	rs3 = st3.executeQuery(sql3);
	rs4 = st4.executeQuery(sql4);
	
}catch(Exception e){ 
    e.printStackTrace();
    out.println(sql);
    out.println(sql2);
    out.println(sql3);
    out.println(sql4);
}

while (rs.next()) {
    String idx = rs.getString("idx");
    String title = rs.getString("title");
    
    Map<String, String> row = new HashMap<>();
    row.put("idx", idx);
    row.put("title", title);
    
    memberboardlist.add(row);
}

while (rs2.next()) {
    String idx = rs2.getString("idx");
    String title = rs2.getString("title");
    
    Map<String, String> row = new HashMap<>();
    row.put("idx", idx);
    row.put("title", title);
    
    Noticelist.add(row);
}

while (rs3.next()) {
    String idx = rs3.getString("idx");
    String title = rs3.getString("title");
    
    Map<String, String> row = new HashMap<>();
    row.put("idx", idx);
    row.put("title", title);
    
    anonymitylist.add(row);
}

while (rs4.next()) {
    String idx = rs4.getString("idx");
    String title = rs4.getString("title");
    
    Map<String, String> row = new HashMap<>();
    row.put("idx", idx);
    row.put("title", title);
    
    gallerylist.add(row);
}

    // request 객체에 데이터 저장
    request.setAttribute("memberboardlist", memberboardlist);
    request.setAttribute("Noticelist", Noticelist);
    request.setAttribute("anonymitylist", anonymitylist);
    request.setAttribute("gallerylist", gallerylist);

    // 뷰(View) 역할을 하는 JSP로 포워딩
    RequestDispatcher dispatcher = request.getRequestDispatcher("../board/main.jsp");
    dispatcher.forward(request, response);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
