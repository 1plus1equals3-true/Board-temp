/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-09-15 07:58:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.IOException;
import java.nio.file.*;
import java.sql.*;
import lib.DB;

public final class write_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("lib.DB");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");

String login_id = "";
login_id = (String)session.getAttribute("ss_check");
String ip = java.net.Inet4Address.getLocalHost().getHostAddress();
//out.print(ip);

	Date today = new Date(); // 현재 날짜와 시간 객체 생성
	SimpleDateFormat yearFormat = new SimpleDateFormat("yyyyMMdd"); // 년도 형식 지정
	String ymd = yearFormat.format(today); // 년도만 추출
	int intymd = Integer.parseInt(ymd);
	
	SimpleDateFormat filetimeFormat = new SimpleDateFormat("yyyyMMddHHmmss");
	String filetime = filetimeFormat.format(today);

	//실제로 서버에 저장되는 path
	String path = "D:\\data";
	//out.println("절대 경로 : " + path + "<br/>");
	String dir = path + "\\board" + ymd;
	//디렉토리 생성
	Path directoryPath = Paths.get(dir);
	try {
	    Files.createDirectory(directoryPath);
	
	    System.out.println(directoryPath + " 디렉토리가 생성되었습니다.");
	    
	} catch (FileAlreadyExistsException e) {
	    //System.out.println("디렉토리가 이미 존재합니다");
	} catch (NoSuchFileException e) {
	    System.out.println("디렉토리 경로가 존재하지 않습니다");
	}catch (IOException e) {
	    e.printStackTrace();
	}
	
	int size = 1024 * 1024 * 10; // 파일 사이즈 설정 : 10M
	String fileName = null;    // 업로드한 파일 이름
	String originalFileName = "";    //  서버에 중복된 파일 이름이 존재할 경우 처리하기 위해

	// cos.jar라이브러리 클래스를 가지고 실제 파일을 업로드하는 과정
	MultipartRequest multi = null;
	
	try{
	    // DefaultFileRenamePolicy 처리는 중복된 이름이 존재할 경우 처리할 때
	    // request, 파일저장경로, 용량, 인코딩타입, 중복파일명에 대한 정책
	    multi = new MultipartRequest(request, dir, size, "utf-8", new DefaultFileRenamePolicy());
	    
	    //String uid = multi.getParameter("uid");
	    //System.out.println(uid);
	    
	    // 전송한 전체 파일이름들을 가져온다.
	    Enumeration files = multi.getFileNames();
	    String str = (String)files.nextElement();
	    //System.out.println(str);
	    
	    
	    //파일명 중복이 발생했을 때 정책에 의해 뒤에 1,2,3 처럼 숫자가 붙어 고유 파일명을 생성한다.
	    // 이때 생성된 이름을 FilesystemName이라고 하여 그 이름 정보를 가져온다. (중복 처리)
	    fileName = multi.getFilesystemName(str);
	    //실제 파일 이름을 가져온다.
	    //out.print(fileName);
	    //System.out.println(fileName);
	    
	    originalFileName = multi.getOriginalFileName(str);
	    //out.print(originalFileName);
	    //System.out.println(originalFileName);
     
    
	}catch(Exception e){
   		e.printStackTrace();
	}
	
	//확장자 찾기
		int index = 0;
		if (fileName != null) {
			index = fileName.lastIndexOf(".");
		}
		String extension ="";
		if (index > 0) {
			extension = fileName.substring(index);
			//System.out.println(extension); //확장자 시스템 출력
		}
		
	//업로드된 파일명 변경하기
			String filetimeex = filetime + extension;
			Path src = Paths.get(dir +"\\"+ fileName);
		    Path dest = Paths.get(dir +"\\"+ filetimeex);
			
		    try {
			    Path newFilePath = Files.move(src, dest);

			    //System.out.println(newFilePath);

			} catch (IOException e) {
			    e.printStackTrace();
			}
		    
		    if (fileName == null) {
		    	filetimeex = null;
		    	dir = null;
		    }

String writename = multi.getParameter("writename");
String writepwd = multi.getParameter("writepwd");
String writetitle = multi.getParameter("writetitle");
String writetext = multi.getParameter("writetext");
String Noticemode = multi.getParameter("Noticemode");

if ("on".equals(Noticemode)) { // NullPointerException 방지
    Noticemode = "0";
} else if (Noticemode == null && login_id != null) {
    // 체크되지 않았고 로그인 상태인 경우
    Noticemode = "1";
} else {
    // 그 외의 경우 (체크되지 않았고 로그인되지 않은 상태)
    login_id = "";
    Noticemode = "2";
}

String sql = "";
Connection conn=null;
Statement st = null;
ResultSet rs = null;
PreparedStatement ps = null;

try {
	conn = DB.getConnection();
	
	if (writename != null) {
		sql = "insert into board(name,pwd,title,content,regdate,ip,upfile,originalfile,relativedir,boardtype) " +
				   " values(?,?,?,?,now(),?,?,?,?,?)";
		ps = conn.prepareStatement(sql);
		
		ps.setString(1, writename);
		ps.setString(2, writepwd);
		ps.setString(3, writetitle);
		ps.setString(4, writetext);
		ps.setString(5, ip);
		ps.setString(6, filetimeex);
		ps.setString(7, originalFileName);
		ps.setString(8, dir);
		ps.setString(9, Noticemode);
	}else {
		sql = "SELECT name FROM member WHERE uid='"+login_id+"'";
		st = conn.createStatement();
		rs = st.executeQuery(sql);
		rs.next();
		String memname = rs.getString("name");
		
		sql = "insert into board(title,content,regdate,ip,uid,upfile,originalfile,relativedir,name,boardtype) " +
				   " values(?,?,now(),?,?,?,?,?,?,?)";
		
		ps = conn.prepareStatement(sql);
		

		ps.setString(1, writetitle);
		ps.setString(2, writetext);
		ps.setString(3, ip);
		ps.setString(4, login_id);
		ps.setString(5, filetimeex);
		ps.setString(6, originalFileName);
		ps.setString(7, dir);
		ps.setString(8, memname);
		ps.setString(9, Noticemode);
	}
	
	ps.executeUpdate();
	
	response.sendRedirect("list.jsp");
	 
	 
}catch(Exception e){ 
	  out.println(e.toString());
	  out.println(sql);
}finally {
  	if (ps != null){
		   ps.close();
		}
  	if(rs != null){
		   rs.close();
		}
	if (st != null){
		   st.close();
		}
	if (conn != null){
		   conn.close();
		}
}


    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
