/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-09-05 07:36:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.IOException;
import java.nio.file.*;
import java.sql.*;
import lib.DB;

public final class Modify_005fproc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("lib.DB");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
	Date today = new Date(); // 현재 날짜와 시간 객체 생성
	SimpleDateFormat yearFormat = new SimpleDateFormat("yyyyMMdd"); // 년도 형식 지정
	String ymd = yearFormat.format(today); // 년도만 추출
	int intymd = Integer.parseInt(ymd);
	
	SimpleDateFormat filetimeFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
	String filetime = filetimeFormat.format(today);
	
	String path = "D:\\data";
	// 경로
	//out.println("절대 경로 : " + path + "<br/>");
	String dir = path + "\\" + ymd;
	// 디렉토리 경로
	
	Path directoryPath = Paths.get(dir);
	//디렉토리 자동생성
		try {
		    Files.createDirectory(directoryPath);
		
		    System.out.println(directoryPath + " 디렉토리가 생성되었습니다.");
		    
		} catch (FileAlreadyExistsException e) {
		    //System.out.println("디렉토리가 이미 존재합니다");
		} catch (NoSuchFileException e) {
		    System.out.println("디렉토리 경로가 존재하지 않습니다");
		}catch (IOException e) {
		    e.printStackTrace();
		}
	
	int size = 1024 * 1024 * 10; // 파일 사이즈 설정 : 10M
	String fileName = null;    // 업로드한 파일 이름
	String originalFileName = "";    //  서버에 중복된 파일 이름이 존재할 경우 처리하기 위해

	// cos.jar라이브러리 클래스를 가지고 실제 파일을 업로드하는 과정
	MultipartRequest multi = null;
	
	try{
	    // DefaultFileRenamePolicy 처리는 중복된 이름이 존재할 경우 처리할 때
	    // request, 파일저장경로, 용량, 인코딩타입, 중복파일명에 대한 정책
	    multi = new MultipartRequest(request, dir, size, "utf-8", new DefaultFileRenamePolicy());
	    
	    //String uid = multi.getParameter("uid");
	    //System.out.println(uid);
	    
	    // 전송한 전체 파일이름들을 가져온다.
	    Enumeration files = multi.getFileNames();
	    String str = (String)files.nextElement();
	    //System.out.println(str);
	    
	    
	    //파일명 중복이 발생했을 때 정책에 의해 뒤에 1,2,3 처럼 숫자가 붙어 고유 파일명을 생성한다.
	    // 이때 생성된 이름을 FilesystemName이라고 하여 그 이름 정보를 가져온다. (중복 처리)
	    fileName = multi.getFilesystemName(str); //업로드 후 변경된 파일이름
	    
	    //실제 파일 이름을 가져온다.
	    //out.print(fileName);
	    //System.out.println(fileName);
	    
	    originalFileName = multi.getOriginalFileName(str); //업로드된 원래 파일이름
	    //out.print(originalFileName);
	    //System.out.println(originalFileName);
     
    
	}catch(Exception e){
   		e.printStackTrace();
	}
	int index = 0;
	if (fileName != null) {
		index = fileName.lastIndexOf(".");
	}
	
	
	//확장자 찾기
	String extension ="";
	if (index > 0) {
		extension = fileName.substring(index);
		//System.out.println(extension); //확장자 시스템 출력
	}
	
	//업로드된 파일명 변경하기
	String filetimeex = filetime + extension;
	Path src = Paths.get(dir +"\\"+ fileName);
    Path dest = Paths.get(dir +"\\"+ filetimeex);
	
    try {
	    Path newFilePath = Files.move(src, dest);

	    //System.out.println(newFilePath);

	} catch (IOException e) {
	    e.printStackTrace();
	}
    
    if (fileName == null) {
    	filetimeex = null;
    	dir = null;
    }

      out.write("\r\n");
      out.write("\r\n");
 
	String idx = multi.getParameter("idx");
	String a = multi.getParameter("uid");
	String b = multi.getParameter("upass1");
	String c = multi.getParameter("upass2");
	
	if(!b.equals(c)){
		
      out.write("\r\n");
      out.write("				<script>\r\n");
      out.write("					alert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("					location.replace(\"Modify.jsp?uid=");
      out.print( a );
      out.write("\");\r\n");
      out.write("				</script>   \r\n");
      out.write("		");

				return;
			}
			
			if( b == null || b.equals("")){
				
      out.write("\r\n");
      out.write("					<script>\r\n");
      out.write("						alert(\"비밀번호를 입력하세요.\");\r\n");
      out.write("						location.replace(\"Modify.jsp?uid=");
      out.print( a );
      out.write("\");\r\n");
      out.write("					</script>\r\n");
      out.write("				");

					return;
			}
	
	String d = multi.getParameter("uname");
	
	if( d == null || d.equals("")){
		
      out.write("\r\n");
      out.write("			<script>\r\n");
      out.write("				alert(\"이름을 입력하세요.\");\r\n");
      out.write("				location.replace(\"Modify.jsp?uid=");
      out.print( a );
      out.write("\");\r\n");
      out.write("			</script>\r\n");
      out.write("		");

			return;
	}
	
	String ee = multi.getParameter("sex");
	String yy = multi.getParameter("yyyy");
	String mm = multi.getParameter("mm");
	String dd = multi.getParameter("dd");
	String ff[] = multi.getParameterValues("hobby");
	String yymmdd = yy+"-"+mm+"-"+dd;
	String hobby = "";
	String [] h = multi.getParameterValues("hobby");
	if(h != null)
	{
	   hobby = String.join(",", h);
	}
	String filecheck = multi.getParameter("filecheck");
	//String original_file = multi.getParameter("original_file");
	String original_file = "";
	String original_dir = "";
	//if (original_file != null)
	//original_file = "D:\\ws0903\\jsp\\src\\main\\webapp\\data\\"+original_file;
	//File file = new File(original_file);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>수정</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	아이디 : ");
      out.print( a );
      out.write("<br>\r\n");
      out.write("	비밀번호 : ");
      out.print( b );
      out.write("<br>\r\n");
      out.write("	비밀번호 확인 : ");
      out.print( c );
      out.write("<br>\r\n");
      out.write("	이름 : ");
      out.print( d );
      out.write("<br>\r\n");
      out.write("	성별 : ");
      out.print( ee );
      out.write("<br>\r\n");
      out.write("	생일 : ");
      out.print( yymmdd );
      out.write("<br>\r\n");
      out.write("	취미 : ");
      out.print( hobby );
      out.write("<br>\r\n");
      out.write("		  \r\n");
      out.write("		  \r\n");
      out.write("		  \r\n");
      out.write("		  \r\n");
      out.write("		  ");

		  String sql = "";
			  Connection conn=null;
			  PreparedStatement ps = null;
			  ResultSet rs = null;
			  try{
				 
				 conn = DB.getConnection();
				 out.println("연결 성공");
				 {
					 sql = "select * from member where uid=?";
					 ps = conn.prepareStatement(sql);
					 
					 ps.setString(1, a);
					 rs = ps.executeQuery();
					 rs.next();
					 original_file = rs.getString("upfile");
					 original_dir = rs.getString("originaldir");
					 if (original_file != null && filecheck != null) {
						 original_file = original_dir + "\\" + original_file;
						 //System.out.println(original_file);
						 File file = new File(original_file);
						 
						if( file.exists() ){
				    		if(file.delete()){
				    			//System.out.println("파일삭제 성공");
				    		}else{
				    			System.out.println("파일삭제 실패");
				    		}
				 		}
					 }
					 
				 }
				 
				 if (filecheck == null) {
					 sql = "update member set upassword=?,upasscheck=?,name=?,sex=?,birth=?,hobby=? where uid=?";
					   
					 ps = conn.prepareStatement(sql);
					 
					 ps.setString(1, b);
					 ps.setString(2, c);
					 ps.setString(3, d);
					 ps.setString(4, ee);
					 ps.setString(5, yymmdd);
					 ps.setString(6, hobby);
					 ps.setString(7, a);
				 }else {
					 sql = "update member set upassword=?,upasscheck=?,name=?,sex=?,birth=?,hobby=?,upfile=?,originalfile=?,originaldir=? where uid=?";
					   
					 ps = conn.prepareStatement(sql);
					 
					 ps.setString(1, b);
					 ps.setString(2, c);
					 ps.setString(3, d);
					 ps.setString(4, ee);
					 ps.setString(5, yymmdd);
					 ps.setString(6, hobby);
					 ps.setString(7, filetimeex);
					 ps.setString(8, originalFileName);
					 ps.setString(9, dir);
					 ps.setString(10, a);
					 
				 }
				 
				 ps.executeUpdate();
				 
				 out.println("수정성공");
				 
				 response.sendRedirect("View.jsp?uid="+a);
				 
				 //if( file.exists() ){
			    		//if(file.delete()){
			    			//System.out.println("파일삭제 성공");
			    		//}else{
			    			//System.out.println("파일삭제 실패");
			    		//}
			 		//}
			  	
			  }
			  catch(Exception e){ 
				  out.println(e.toString());
				  out.println(sql);
				}
			  finally {
				  	if (rs != null){
					   rs.close();
					}
					if (ps != null){
					   ps.close();
					}
					if (conn != null){
					   conn.close();
					}
			  }
	
		  
      out.write("\r\n");
      out.write("		  \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
