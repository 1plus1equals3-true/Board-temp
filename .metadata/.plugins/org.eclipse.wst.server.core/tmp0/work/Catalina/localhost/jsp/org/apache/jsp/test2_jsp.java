/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-09-05 06:53:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.File;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.io.IOException;
import java.nio.file.*;
import java.io.*;
import java.sql.*;
import lib.DB;

public final class test2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("lib.DB");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String uid = request.getParameter("uid");

String sql = "";
Connection conn=null;
PreparedStatement ps = null;
ResultSet rs = null;
String upfile = "";
String originalfile = "";
String originaldir = "";

try{
	 
	 conn = DB.getConnection();
	 {
		 sql = "select * from member where uid=?";
		 ps = conn.prepareStatement(sql);
		 
		 ps.setString(1, uid);
		 rs = ps.executeQuery();
		 rs.next();
		 upfile = rs.getString("upfile");
		 originalfile = rs.getString("originalfile");
		 originaldir = rs.getString("originaldir");
		 
	 }
}	catch(Exception e){ 
		out.println(e.toString());
		out.println(sql);
	}

	//경로 폴더이름만 뽑기
	int index = 0;
	if (originaldir != null) {
		index = originaldir.lastIndexOf("\\");
	}
	
	String ext =""; // 뽑아낸 폴더이름
	if (index > 0) {
		ext = originaldir.substring(index + 1);
		//System.out.println(ext); //시스템 출력
	}

try{

		String path = "D:\\data"; // 절대경로
		String dir = ext; // 상대경로
	   	String fileName = upfile; // 파일이름
	   	String filePath = path + "\\" + dir; // 완전한 경로

	    request.setCharacterEncoding("UTF-8");
	    
	    fileName = new String(fileName.getBytes("UTF-8"), "UTF-8");
	    File file = new File(filePath, fileName);

	    if(file.isFile())
	    {
	        String extension = fileName.substring(fileName.lastIndexOf(".") + 1);
	        
	        if(extension.toLowerCase().equals("jpg") ||
	              extension.toLowerCase().equals("jpeg") ||
	              extension.toLowerCase().equals("gif") ||
	              extension.toLowerCase().equals("png") )
	        {
	           response.setContentType("image/jpeg");
	           response.setHeader("Content-Type","image/jpeg");
	        }
	        else
	        {
	           String header = request.getHeader("User-Agent");
	           
	            if (header.contains("MSIE") || header.contains("Trident")) {  //----------------------------------------
	            	originalfile = java.net.URLEncoder.encode(originalfile,"UTF-8").replaceAll("\\+", "%20");
	                response.setHeader("Content-Disposition", "attachment;filename=" + originalfile + ";");
	            } else {
	            	originalfile = new String(originalfile.getBytes("UTF-8"), "ISO-8859-1");
	                response.setHeader("Content-Disposition", "attachment; filename=\"" + originalfile + "\"");
	             }

	            response.setContentType( "application/download; UTF-8" );
	           response.setHeader("Content-Type", "application/octet-stream");
	        }
	        
	        int bytes = (int)file.length();
	        
	        response.setContentLength(bytes);
	        response.setHeader("Content-Transfer-Encoding", "binary;");
	        response.setHeader("Pragma", "no-cache;");
	        response.setHeader("Expires", "-1;");

	        BufferedInputStream fin = new BufferedInputStream(new FileInputStream(file));
	        BufferedOutputStream outs = new BufferedOutputStream(response.getOutputStream());

	        byte[] readByte = new byte[4096];
	        try{
	            while((bytes = fin.read(readByte)) > 0){
	                outs.write(readByte, 0, bytes);
	                outs.flush();
	            }
	        }catch(Exception ex) {

	        }finally{
	            outs.close();
	            fin.close();
	        }
	    }
	}catch(Exception ex){
	    ex.printStackTrace();
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
